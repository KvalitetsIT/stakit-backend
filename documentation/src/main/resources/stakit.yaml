openapi: 3.0.0
info:
  title: Stakit
  description: API description for StaKit.
  version: "1.0.0"
  contact:
    email: development@kvalitetitsit.dk
tags:
  - name: adapter
    description: API's used by the status adapters.
  - name: group-management
    description: API's used to manage the groups.
  - name: service-management
    description: API's used to manage services.
  - name: announcements
    description: API's to create, update, delete and read announcements.
  - name: StaKit
    description: Public API's for the frontend.

security:
  - bearerAuth: []

servers:
  - url: '{protocol}://{environment}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      environment:
        enum:
          - localhost # Docker-compose setup
        default: localhost # Development
      port:
        enum:
          - 8080
        default: 8080
paths:
  /v1/status:
    post:
      tags:
        - adapter
      security:
        - apiKeyAuth: []
      summary: Update status
      description: Used to update status of a service from one of the adapters.
      requestBody:
        description: Status update including name, status etc.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/status-update'
      responses:
        '201':
          description: The status update was accepted.
        '401':
          $ref: '#/components/responses/401'

  /v1/groups:
    post:
      tags:
        - group-management
      summary: Create new group
      description: Used to create a new group
      requestBody:
        description: The group to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-input'
      responses:
        '201':
          description: The group is created.
          headers:
            Location:
              schema:
                type: string
              description: The location of the created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-response'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'

    get:
      tags:
        - group-management
      summary: Get all groups.
      description: Used to get a list of all groups.
      responses:
        '200':
          description: List of all groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/401'

  /v1/groups/{uuid}:
    get:
      tags:
        - group-management
      summary: Group get.
      description: API to get a single group
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '200':
          description: The group for the given uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
    patch:
      tags:
        - group-management
      summary: To update list of services in group.
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: The complete list of services in group.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-patch'
      responses:
        '204':
          description: The group have been patched with success.
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
    put:
      tags:
        - group-management
      summary: Used to update a group.
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: The updated group.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-input'
      responses:
        '201':
          description: The group have been updated with success.
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
    delete:
      tags:
        - group-management
      summary: Delete a group
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

  /v1/groups/{uuid}/services:
    get:
      tags:
        - group-management
      summary: Get services in group
      description: API to get all services in single group
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '200':
          description: Array of all services in the group with the given uuid.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

  /v1/services:
    get:
      tags:
        - service-management
      summary: Services GET API
      description: API to get all services.
      responses:
        '200':
          description: List of all services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'
        '401':
          $ref: '#/components/responses/401'
    post:
      tags:
        - service-management
      summary: Services POST API
      description: API to create a service
      requestBody:
        description: Service to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-create'
      responses:
        '201':
          description: The service was created.
          headers:
            Location:
              schema:
                type: string
              description: The location of the created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-response'
        '401':
          $ref: '#/components/responses/401'

  /v1/services/{uuid}:
    get:
      tags:
        - service-management
      summary: Services POST API
      description: API to get a single service
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '200':
          description: The service for the given uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

    put:
      tags:
        - service-management
      summary: Services PUT API
      description: API to update a service
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: Service to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-update'
      responses:
        '201':
          description: The service was created.
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
    delete:
      tags:
        - service-management
      summary: Delete a service
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

  /v1/announcements:
    post:
      tags:
        - announcements
      summary: Announcements PUT API
      description: API to create an announcement.
      requestBody:
        description: Announcement to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcement-create'
      responses:
        '201':
          description: The announcement was created.
          headers:
            Location:
              schema:
                type: string
              description: The location of the created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-response'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

  /v1/announcements/{uuid}:
    get:
      tags:
        - announcements
      summary: Announcements GET API.
      description: API to get a single announcement.
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '200':
          description: The announcement for the given uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcement'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

    delete:
      tags:
        - announcements
      summary: Announcements DELETE API.
      description: API to delete a single announcement.
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

    put:
      tags:
        - announcements
      summary: Announcements PUT API
      description: API to update an announcement.
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: Announcement to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcement-update'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'

  /v1/service-status-grouped:
    get:
      tags:
        - StaKit
      security: []
      summary: Get status for all services
      description: Used to get status for all services. They are grouped by the configured group. Returned in the order they should be displayed.
      responses:
        '200':
          description: Status for all services grouped.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/status-group'

  /v1/announcements-to-show:
    get:
      tags:
        - StaKit
      security: []
      summary: Get announcements to show
      description: Used to get announcements to show. They are returned in the order they should be displayed.
      responses:
        '200':
          description: Status for all services grouped.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/announcements-to-show'

  /v1/subscribe:
    post:
      tags:
        - StaKit
      security: []
      summary: Create mail subscription
      description: API to create mail subscription.
      requestBody:
        description: Requested mail subscription to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscribe'
      responses:
        '201':
          description: The scubscription was created.
          headers:
            Location:
              schema:
                type: string
              description: The location of the created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-response'
        '400':
          $ref: '#components/responses/400'

  /v1/subscribe/{uuid}:
    delete:
      tags:
        - StaKit
      parameters:
        - $ref: '#/components/parameters/uuid'
      security: []
      summary: Delete a subscription
      description: API to delete a subscription. This is public so the unsubscribe link works in emails.
      responses:
        '201':
          $ref: '#/components/responses/201'

  /v1/subscribe-confirm/{uuid}:
    get:
      tags:
        - StaKit
      parameters:
        - $ref: '#/components/parameters/uuid'
      security: []
      summary: Patch mail subscription
      description: API to patch mail subscription. Currently it is only possible to set confirmed status to true.
      responses:
        '201':
          $ref: '#/components/responses/201'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  responses:
    '204':
      description: 'No Content.'
    '400':
      description: 'Bad Request. This could be because: * One of the required parameters/properties are missing or is empty <br> * Length of input is exceeding maximum length <br> (See a possible detailed error message in the in the response.)'
    '401':
      description: 'Unauthorized. No or invalid authorization was provided.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'
    '404':
      description: "Not Found. The requested resource was not found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'

  parameters:
    uuid:
      name: uuid
      in: path
      description: The uuid for the resource in question.
      required: true
      schema:
        type: string
        format: uuid
      example: 50edcf81-d36f-4246-a4af-168ba37fd57b

  schemas:
    status-update:
      type: object
      required:
        - service
        - status
        - status-time
        - service-name
      properties:
        service:
          description: The service to update. If the service is not created it will be created. It is recommended to use a hashed value of for instance the service name being monitored.
          type: string
          example: "4fa59cef25fbcab4155e6eb5201a27ce1eb010408e4550b1313f1126"
        service-name:
          description: The name of the service to update.
          type: string
          example: "My Cool Service"
        status:
          description: Status of service
          type: string
          enum: [OK, NOT_OK]
        status-time:
          description: Date/time for the status
          type: string
          format: date-time
        message:
          description: Optional message for the status update.
          type: string
          example: "Service can not connect to database."

    status-group:
      type: object
      required:
        - status
      properties:
        name:
          description: Name of the group.
          type: string
          example: "My Cool Group Of Services"
          maxLength: 100
        uuid:
          description: Group UUID
          type: string
          format: uuid
        services:
          description: Array of services and their status.
          type: array
          items:
            $ref: "#/components/schemas/service-status"
        description:
          description: Description of group
          type: string
          example: "Very descriptive"
          maxLength: 250

    group:
      type: object
      required:
        - uuid
        - name
        - display_order
      properties:
        uuid:
          description: Group uuid
          type: string
          format: uuid
        name:
          description: Group name
          type: string
          maxLength: 50
        display_order:
          description: Order the group should be displayed on screen. From low to high.
          type: integer
          maximum: 100
          minimum: 0
        services:
          description: Services in the group identified by UUID.
          type: array
          items:
            type: string
            format: uuid
        description:
          description: Description of group
          type: string
          example: "Very descriptive"
          maxLength: 250

    group-patch:
      type: object
      properties:
        services:
          description: The complete list of services (uuid) in group.
          type: array
          items:
            type: string
            description: Service UUID
            format: uuid

    group-input:
      type: object
      required:
        - name
        - display_order
        - services
      properties:
        name:
          description: Group name
          type: string
          maxLength: 50
        display_order:
          description: Order the group should be displayed on screen. From low to high.
          type: integer
          maximum: 100
          minimum: 0
        description:
          description: Description of group
          type: string
          example: "Very descriptive"
          maxLength: 250
        services:
          description: Array of UUID's for the services in the group.
          type: array
          items:
            type: string
            format: uuid
            description: Service UUID.

    announcements-to-show:
      type: object
      required:
        - subject
        - message
        - from_datetime
        - uuid
      properties:
        subject:
          description: Announcement subject/title
          type: string
          maxLength: 100
        message:
          description: Announcement message
          type: string
        from_datetime:
          description: When the announcement is valid from.
          type: string
          format: date-time
        to_datetime:
          description: When the announcement is valid to.
          type: string
          format: date-time
        uuid:
          description: Announcement UUID.
          type: string
          format: uuid

    service-status:
      type: object
      required:
        - uuid
        - name
        - status
      properties:
        uuid:
          description: Service UUID.
          type: string
          format: uuid
        name:
          description: The name of the service.
          type: string
          example: "My Cool Service"
        status:
          description: Status of service.
          type: string
          enum: [OK, NOT_OK]
        description:
          description: Description of service
          type: string
          example: "Very descriptive"
          maxLength: 250

    service:
      type: object
      required:
        - uuid
        - service
        - name
        - ignore_service_name
      properties:
        uuid:
          description: Service UUID.
          type: string
          format: uuid
        service_identifier:
          description: Unique identifier of the service.
          type: string
          example: "4fa59cef25fbcab4155e6eb5201a27ce1eb010408e4550b1313f1126"
          maxLength: 100
        name:
          description: The name of the service.
          type: string
          example: "My Cool Service"
          maxLength: 100
        ignore_service_name:
          description: False if the service name from the status update adapter should be used.
          type: boolean
        status:
          description: Status of service.
          type: string
          enum: [ OK, NOT_OK ]
        group:
          description: Group the service belongs to.
          type: string
          format: uuid
        description:
          description: Description of service
          type: string
          example: "Very descriptive"
          maxLength: 250

    service-create:
      type: object
      required:
        - service_identifier
        - name
        - ignore_service_name
      properties:
        service_identifier:
          description: Unique identifier of the service. If not present it is automatically generated.
          type: string
          example: "4fa59cef25fbcab4155e6eb5201a27ce1eb010408e4550b1313f1126"
          maxLength: 100
        name:
          description: The name of the service.
          type: string
          example: "My Cool Service"
          maxLength: 100
        ignore_service_name:
          description: False if the service name from the status update adapter should be used.
          type: boolean
        group:
          description: Group the service belongs to.
          type: string
          format: uuid
        description:
          description: Description of service
          type: string
          example: "Very descriptive"
          maxLength: 250

    service-update:
      type: object
      required:
        - name
        - service_identifier
        - ignore_service_name
      properties:
        service_identifier:
          description: Unique identifier of the service. If not present it is automatically generated.
          type: string
          example: "4fa59cef25fbcab4155e6eb5201a27ce1eb010408e4550b1313f1126"
          maxLength: 100
        name:
          description: The name of the service.
          type: string
          example: "My Cool Service"
          maxLength: 100
        ignore_service_name:
          description: False if the service name from the status update adapter should be used.
          type: boolean
        group:
          description: Group the service belongs to.
          type: string
          format: uuid
        description:
          description: Description of service
          type: string
          example: "Very descriptive"
          maxLength: 250

    announcement:
      type: object
      required:
        - uuid
        - from_datetime
        - subject
        - message
      properties:
        uuid:
          description: Announcement uuid
          type: string
          format: uuid
        from_datetime:
          description: When the announcement is valid from.
          type: string
          format: date-time
        to_datetime:
          description: When to announcement is valid to. I current time is after this time it will not be shown on the frontpage.
          type: string
          format: date-time
        subject:
          description: Announcement subject/title
          type: string
          maxLength: 100
        message:
          description: Announcement message/body
          type: string

    announcement-create:
      type: object
      required:
        - from_datetime
        - subject
        - message
      properties:
        from_datetime:
          description: When the announcement is valid from.
          type: string
          format: date-time
        to_datetime:
          description: When to announcement is valid to. I current time is after this time it will not be shown on the frontpage.
          type: string
          format: date-time
        subject:
          description: Announcement subject/title
          type: string
          maxLength: 100
        message:
          description: Announcement message/body
          type: string

    announcement-update:
      type: object
      required:
        - from_datetime
        - subject
        - message
      properties:
        from_datetime:
          description: When the announcement is valid from.
          type: string
          format: date-time
        to_datetime:
          description: When to announcement is valid to. I current time is after this time it will not be shown on the frontpage.
          type: string
          format: date-time
        subject:
          description: Announcement subject/title
          type: string
          maxLength: 100
        message:
          description: Announcement message/body
          type: string

    subscribe:
      type: object
      required:
        - email
        - announcements
        - groups
      properties:
        email:
          description: Email to subscribe
          type: string
        announcements:
          description: Subscribe to announcements
          type: boolean
        groups:
          description: Zero or more groups to get updates for.
          type: array
          items:
            type: string
            description: Group UUID
            format: uuid

    subscribe-patch:
      type: object
      properties:
        confirmed:
          description: Set to true if subscription is to be confirmed.
          type: boolean

    create-response:
      type: object
      required:
        - uuid
      properties:
        uuid:
          description: UUID of the created resource
          type: string
          format: uuid

    basic-error:
      type: object
      required:
        - error
        - path
        - status
        - status_text
        - timestamp
      properties:
        error:
          description: Error message.
          type: string
        path:
          description: Path
          type: string
        status:
          description: HTTP status code
          type: integer
        status_text:
          description: HTTP status text
          type: string
        timestamp:
          description: Time of error
          type: string
          format: date-time
