openapi: 3.0.0
info:
  title: Stakit
  description: API description for StaKit.
  version: "1.0.0"
  contact:
    email: development@kvalitetitsit.dk
tags:
  - name: StaKit
    description: StaKit related API's

servers:
  - url: '{protocol}://{environment}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      environment:
        enum:
          - localhost # Docker-compose setup
        default: localhost # Development
      port:
        enum:
          - 8080
        default: 8080
paths:
  /v1/status:
    post:
      tags:
        - StaKit
      summary: Update status
      description: Used to update status of a service from one of the adapters.
      requestBody:
        description: Status update including name, status etc.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/status-update'
      responses:
        '201':
          description: The status update was accepted.

  /v1/groups:
    post:
      tags:
        - StaKit
      summary: Create new group
      description: Used to create a new group
      requestBody:
        description: The group to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-input'
      responses:
        '201':
          description: The group is created.
          headers:
            Location:
              schema:
                type: string
              description: The location of the created resource.
    get:
      tags:
        - StaKit
      summary: Get all groups.
      description: Used to get a list of all groups.
      responses:
        '200':
          description: List of all groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/group'

  /v1/groups/{uuid}:
    put:
      tags:
        - StaKit
      summary: Used to update a group.
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        description: The updated group.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-input'
      responses:
        '200':
          description: The group have been updated with success.
        '404':
          description: The group does not exists.

  /v1/service-status-grouped:
    get:
      tags:
        - StaKit
      summary: Get status for all services
      description: Used to get status for all services. They are grouped by the configured group. Returned in the order they should be displayed.
      responses:
        '200':
          description: Status for all services grouped.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status-grouped'

components:
  responses:
    '400':
      description: "Bad Request. This could be because: * One of the required parameters/properties are missing or is empty <br> * Length of input is exceeding maximum length <br> (See a possible detailed error message in the in the response.)"
    '401':
      description: "Unauthorized. This could be because: <br> * The calling system has not been properly authenticated."
    '403':
      description: "Forbidden. This could be because: <br> * The requested information does not belong the organisation of the user <br> * The calling user does not have the required roles"
  parameters:
    uuid:
      name: uuid
      in: path
      description: The uuid for the resource in question.
      required: true
      schema:
        type: string
        format: uuid
      example: 50edcf81-d36f-4246-a4af-168ba37fd57b
  schemas:
    helloResponse:
      type: object
      required:
        - name
        - now
      properties:
        name:
          description: Your name
          type: string
          example: "John Doe"
        now:
          description: Time request was received
          type: string
          format: date-time
        i_can_be_null:
          type: string
          nullable: true

    status-update:
      type: object
      required:
        - service
        - status
        - status-time
        - service-name
      properties:
        service:
          description: The service to update. If the service is not created it will be created. It is recommended to use a hashed value of for instance the service name being monitored.
          type: string
          example: "4fa59cef25fbcab4155e6eb5201a27ce1eb010408e4550b1313f1126"
        service-name:
          description: The name of the service to update.
          type: string
          example: "My Cool Service"
        status:
          description: Status of service
          type: string
          enum: [OK, NOT_OK]
        status-time:
          description: Date/time for the status
          type: string
          format: date-time
        message:
          description: Optional message for the status update.
          type: string
          example: "Service can not connect to database."

    status-grouped:
      type: object
      required:
        - status
      properties:
        status-group:
          description: The service to update. If the service is not created it will be created. It is recommended to use a hashed value of for instance the service name being monitored.
          type: array
          items:
            $ref: "#/components/schemas/grouped"

    group:
      type: object
      required:
        - id
        - name
        - display-order
      properties:
        id:
          description: Group name
          type: string
          format: uuid
        name:
          description: Group name
          type: string
          maxLength: 50
        display-order:
          description: Order the group should be displayed on screen. From low to high.
          type: integer
          maximum: 100
          minimum: 0

    group-input:
      type: object
      required:
        - name
        - display-order
      properties:
        name:
          description: Group name
          type: string
          maxLength: 50
        display-order:
          description: Order the group should be displayed on screen. From low to high.
          type: integer
          maximum: 100
          minimum: 0

    grouped:
      type: object
      required:
        - group-name
      properties:
        group-name:
          description: Name of the group.
          type: string
          example: "My Cool Group Of Services"
          maxLength: 100
        services:
          description: Array of servies and their status.
          type: array
          items:
            $ref: "#/components/schemas/service-status"

    service-status:
      type: object
      properties:
        service-name:
          description: The name of the service.
          type: string
          example: "My Cool Service"
        status:
          description: Status of service.
          type: string
          enum: [OK, NOT_OK]
